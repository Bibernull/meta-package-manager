name: Unittests
on: [push, pull_request]

jobs:

  unittests:
    name: Unit-tests
    strategy:
      matrix:
        # See what each os came pre-installed with at:
        # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{matrix.python-version}}
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
    - name: Linux - Fix runner cache folder permissions
      if: runner.os == 'Linux'
      run: |
        mkdir -p /home/runner/.cache
        sudo chown -R runner /home/runner/.cache

    ### Install or upgrade package managers on each platform, and made them
    ### ready to use for mpm.

    # Homebrew
    - name: macOS - Upgrade Homebrew
      if: runner.os == 'macOS'
      run: |
        brew update

    # Apt
    - name: Linux - Upgrade apt
      if: runner.os == 'Linux'
      run: |
        sudo apt update

    # Chocolatey
    - name: Windows - Upgrade Chocolatey
      if: runner.os == 'Windows'
      run: |
        choco upgrade chocolatey

    # NPM
    - name: Linux - Install npm
      if: runner.os == 'Linux'
      run: |
        sudo apt install -y npm
    - name: macOS - Install npm
      if: runner.os == 'macOS'
      run: |
        brew unlink node && brew link node
        brew install node
        brew link --overwrite node
        brew install npm
    - name: Windows - Upgrade npm
      if: runner.os == 'Windows'
      run: |
        npm install -g npm

    # Yarn
    - name: macOS - Install Yarn
      if: runner.os == 'macOS'
      run: |
        brew install yarn
    - name: Linux - Install Yarn
      if: runner.os == 'Linux'
      run: |
        curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
        sudo apt update
        sudo apt install -y yarn
    - name: Windows - Install Yarn
      if: runner.os == 'Windows'
      run: |
        choco install yarn

    # Composer
    - name: macOS - Install Composer
      if: runner.os == 'macOS'
      run: |
        brew install composer
    - name: Windows - Install Composer
      if: runner.os == 'Windows'
      run: |
        choco install composer

    # APM
    - name: macOS - Install Atom
      if: runner.os == 'macOS'
      run: |
        brew install Caskroom/cask/atom
    - name: Linux - Install Atom
      if: runner.os == 'Linux'
      run: |
        sudo add-apt-repository -y ppa:webupd8team/atom
        sudo apt install -y atom
    - name: Windows - Install Atom
      if: runner.os == 'Windows'
      run: |
        choco install atom

    # MAS
    - name: macOS - Install mas
      if: runner.os == 'macOS'
      run: |
        brew install mas

    # Flatpak
    - name: Linux - Install Flatpak
      if: runner.os == 'Linux'
      run: |
        sudo add-apt-repository -y ppa:alexlarsson/flatpak
        sudo apt install -y flatpak

    # Gem
    - name: Upgrade gem
      run: |
        gem update --system

    # Pip
    - name: Upgrade Pip
      run: |
        python -m pip install --upgrade pip

    # Mpm
    - name: Install mpm and its dependencies
      run: |
        pip install poetry
        poetry install
    - name: mpm CLI output for debugging
      run: |
        poetry run mpm managers
    - name: Unittests and coverage report in destructive mode
      env:
        DESTRUCTIVE_TESTS: true
      run: |
        poetry run pytest --cov=./ --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Check coding style
      run: |
        pip install poetry
        poetry install
        poetry run pycodestyle
        poetry run pylint --exit-zero --rcfile=setup.cfg meta_package_manager

  packaging:
    name: Packaging tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Check building package works
      run: |
        pip install poetry
        poetry install
        poetry build
    - name: Validates package metadata
      run: |
        poetry check
        poetry run twine check ./dist/*
